import { UseQueryOptions } from "@tanstack/react-query";
import type { GetAccountOpts, AccountsRequestResponse } from "@pipedream/sdk";
/**
 * Retrieves the list of accounts associated with the project.
 */
export declare const useAccounts: (input: GetAccountOpts, opts?: {
    useQueryOpts?: Omit<UseQueryOptions<AccountsRequestResponse>, "queryKey" | "queryFn">;
}) => {
    accounts: import("@pipedream/sdk").Account[];
    data: import("@pipedream/sdk").GetAccountsResponse;
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("@pipedream/sdk").GetAccountsResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("@pipedream/sdk").GetAccountsResponse>;
} | {
    accounts: import("@pipedream/sdk").Account[];
    data: import("@pipedream/sdk").GetAccountsResponse;
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("@pipedream/sdk").GetAccountsResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("@pipedream/sdk").GetAccountsResponse>;
} | {
    accounts: import("@pipedream/sdk").Account[];
    data: undefined;
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("@pipedream/sdk").GetAccountsResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("@pipedream/sdk").GetAccountsResponse>;
} | {
    accounts: import("@pipedream/sdk").Account[];
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("@pipedream/sdk").GetAccountsResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("@pipedream/sdk").GetAccountsResponse>;
} | {
    accounts: import("@pipedream/sdk").Account[];
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<import("@pipedream/sdk").GetAccountsResponse, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
    promise: Promise<import("@pipedream/sdk").GetAccountsResponse>;
};
